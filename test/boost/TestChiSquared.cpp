
#include <gtest/gtest.h>

#include <boost/math/distributions/chi_squared.hpp>
#include <iomanip>
#include <iostream>
#include <map>

// https://github.com/KumarRobotics/msckf_vio/blob/master/src/msckf_vio.cpp#L215-L221
std::map<int, double> createChiSquaredTable() {
  std::map<int, double> chi_squared_test_table;
  // Initialize the chi squared test table with confidence
  // level 0.95.
  for (int i = 1; i < 100; ++i) {
    boost::math::chi_squared chi_squared_dist(i);
    chi_squared_test_table[i] = boost::math::quantile(chi_squared_dist, 0.05);
  }
  return chi_squared_test_table;
}

TEST(Boost, ChiSquared) {
  std::map<int, double> chi_squared_test_table = createChiSquaredTable();

  std::vector<double> ref_values = {
      1,  0.00393214,  2,  0.1025865888, 3,  0.3518463177, 4,  0.7107230214,
      5,  1.145476226, 6,  1.635382894,  7,  2.167349909,  8,  2.732636793,
      9,  3.325112843, 10, 3.940299136,  11, 4.574813079,  12, 5.226029488,
      13, 5.891864338, 14, 6.570631384,  15, 7.260943928,  16, 7.961645572,
      17, 8.671760205, 18, 9.390455081,  19, 10.11701306,  20, 10.85081139,
      21, 11.59130521, 22, 12.33801458,  23, 13.09051419,  24, 13.84842503,
      25, 14.61140764, 26, 15.37915658,  27, 16.15139585,  28, 16.92787504,
      29, 17.70836618, 30, 18.49266098,  31, 19.28056856,  32, 20.07191346,
      33, 20.86653399, 34, 21.66428071,  35, 22.46501522,  36, 23.26860902,
      37, 24.07494256, 38, 24.88390438,  39, 25.6953904,   40, 26.5093032,
      41, 27.32555147, 42, 28.1440495,   43, 28.96471667,  44, 29.78747708,
      45, 30.61225915, 46, 31.43899527,  47, 32.26762153,  48, 33.09807743,
      49, 33.93030562, 50, 34.76425168,  51, 35.59986394,  52, 36.43709324,
      53, 37.2758928,  54, 38.11621806,  55, 38.95802653,  56, 39.80127763,
      57, 40.64593263, 58, 41.49195448,  59, 42.33930773,  60, 43.18795845,
      61, 44.03787413, 62, 44.88902356,  63, 45.74137684,  64, 46.59490522,
      65, 47.4495811,  66, 48.30537793,  67, 49.16227018,  68, 50.02023325,
      69, 50.87924348, 70, 51.73927805,  71, 52.60031495,  72, 53.46233296,
      73, 54.3253116,  74, 55.18923108,  75, 56.05407229,  76, 56.91981675,
      77, 57.78644661, 78, 58.65394456,  79, 59.52229389,  80, 60.39147839,
      81, 61.26148237, 82, 62.13229063,  83, 63.00388842,  84, 63.87626144,
      85, 64.74939583, 86, 65.62327812,  87, 66.49789524,  88, 67.37323449,
      89, 68.24928355, 90, 69.12603043,  91, 70.00346347,  92, 70.88157134,
      93, 71.76034302, 94, 72.63976779,  95, 73.51983519,  96, 74.40053508,
      97, 75.28185754, 98, 76.16379294,  99, 77.04633186,
  };
  double eps(1e-8);
  for (auto key_val : chi_squared_test_table) {
    EXPECT_NEAR(ref_values[key_val.first * 2 - 1], key_val.second, eps);
  }
}
